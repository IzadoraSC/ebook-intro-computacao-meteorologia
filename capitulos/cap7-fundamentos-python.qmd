
# Capítulo – Fundamentos de Programação com Python


## Introdução à Linguagem Python

A linguagem Python foi desenvolvida por Guido van Rossum, e lançanda no início da década de 1990. Python é uma linguagem de alto nível interpretada, de código aberto e próposito geral. Sendo utilizada em vários setores como ciência de dados, matemática, geografia, física, medicina, *big data*, *machine learning*, detre outras.

Python é uma linguagem multiplataforma, funciona em diferentes ambientes e sistemas operacionais, como Android, IOS, Linux, Windows e na **nuvem**.

Para executar um programa escrito em Python, é preciso tê-lo instalado em seu computador, assim como também é necessário ter ferramentas para a escrita e execução de códigos. Essas ferramentas são chamadas de ambiente de desenvolvimento integrado (IDE, *integrated development environmen*t), com várias opções gratuitas (VSCode, Spyder, Positron).

A plataforma Google Colab ou Colaboratory (este que você está acessando), permite que você escreva e execute códigos em Python no navegador, sem que seja "necessário" configurar ferramentas, além de possuir acesso gratuito à GPUs e compoartilhamento facilitado.

**Características principais:**
- Simples e legível
- Interpretada (sem necessidade de compilação)
- Ampla comunidade científica e bibliotecas
- Multiplataforma

A linguagem Python, como a maioria das linguagens de programação, é formada por:
- comandos;
- tipos de dados;
- variáveis;
- expressões;
- estrutura de dados;
- funções;
- bibliotecas (pacostes).

Os arquivos (scripts, códigos) criado para executar no computador, devem ter a extensão **.py** (scrip_01.py) e necessitam que o interpretador da linguagem Python esteja instalado no computador que será utilizado.

Em plataformas como o Google Colaboratory estes arquivos terão a extensão **.ipynb** (scrip_01.ipynb), denominados notebooks.

---

## Tipos de Dados Básicos

```python
# Números inteiros e decimais
a = 5           # int
b = 3.14        # float

# Texto (string)
nome = "Meteorologia"

# Booleanos
chovendo = False

# Verificando os tipos
print(type(a))
print(type(nome))

```

---

## Estruturas de Dados

### Listas
- aplicada para dados como coordenadas geográficas. Ex.: (-15,-45).
- quando vamos fazer uma composição colorida de imagens: (3,2,1) #(R,G,B).

```python
temperaturas = [25.3, 27.8, 30.1]
print(temperaturas[0])       # Acessa o primeiro elemento
print(temperaturas[-1])      # Último elemento
```

### Dicionários
Exemplos: usado em paleta de cores, metadados de imagens
```python
estacao = {
    "nome": "Primavera",
    "chuva_mm": 120,
    "dias_quentes": 20
}
print(estacao["chuva_mm"])
```
### Tuplas
- aplicada para dados como coordenadas geográficas. Ex.: (-15,-45).
- quando vamos fazer uma composição colorida de imagens: (3,2,1) #(R,G,B).

```python
y = (1,2,4,6,8)
print(y)
type(y)
```
### Array

Usado para representar imagens (bidimensional).

Forma de estrutura mais importante para se trabalhar nos processamentos de imagens de satélite.

```python
import numpy as np

arr = np.array([1,2,3,4,5,6,7,8])
type(arr)

arr = np.array([[1,2,3,4,5,6,7,8], [8,7,6,5,4,3,2,1]])

print(arr)

arr = np.array([1,2,3,4,5,6,7,8])

arr[-1]

#Calculos
arr.min()
arr.mean()

np.median(arr)

```
## Estruturas de Controle

### Condicional (`if`, `elif`, `else`)

```python
temp = 29

if temp < 18:
    print("Frio")
elif temp <= 28:
    print("Agradável")
else:
    print("Quente")
```

### Repetição (`for`)

```python
for t in temperaturas:
    print(t)
```

---

## Criando Funções

```python
def amplitude_termica(tmax, tmin):
    return tmax - tmin

print(amplitude_termica(31.4, 22.8))
```
